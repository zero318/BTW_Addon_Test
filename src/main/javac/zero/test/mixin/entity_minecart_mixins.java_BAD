package zero.test.mixin;

import net.minecraft.src.*;
import net.minecraft.server.MinecraftServer;

import btw.AddonHandler;

import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Redirect;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
import org.spongepowered.asm.mixin.injection.callback.LocalCapture;
import org.spongepowered.asm.mixin.Overwrite;
import org.spongepowered.asm.mixin.Shadow;

import zero.test.IEntityMixins;
import zero.test.mixin.IEntityMinecartAccessMixins;

import java.util.List;

#include "..\feature_flags.h"

@Mixin(EntityMinecart.class)
public abstract class EntityMinecartMixins extends Entity {
    public EntityMinecartMixins(World world) {
        super(world);
    }
    
#if ENABLE_MINECART_LERP_FIXES
/*
    public double lerpTargetX() {
        EntityMinecart self = (EntityMinecart)(Object)this;
        return ((IEntityMinecartAccessMixins)self).getTurnProgress() > 0 ? (float)((IEntityMinecartAccessMixins)self).getMinecartX() : (double)self.posX;
    }
    public double lerpTargetY() {
        EntityMinecart self = (EntityMinecart)(Object)this;
        return ((IEntityMinecartAccessMixins)self).getTurnProgress() > 0 ? (float)((IEntityMinecartAccessMixins)self).getMinecartY() : (double)self.posY;
    }
    public double lerpTargetZ() {
        EntityMinecart self = (EntityMinecart)(Object)this;
        return ((IEntityMinecartAccessMixins)self).getTurnProgress() > 0 ? (float)((IEntityMinecartAccessMixins)self).getMinecartZ() : (double)self.posZ;
    }
*/
    public float lerpTargetPitch() {
        EntityMinecart self = (EntityMinecart)(Object)this;
        return ((IEntityMinecartAccessMixins)self).getTurnProgress() > 0 ? (float)((IEntityMinecartAccessMixins)self).getMinecartPitch() : self.rotationPitch;
    }
    public float lerpTargetYaw() {
        EntityMinecart self = (EntityMinecart)(Object)this;
        return ((IEntityMinecartAccessMixins)self).getTurnProgress() > 0 ? (float)((IEntityMinecartAccessMixins)self).getMinecartYaw() : self.rotationYaw;
    }
#endif
    
    
#if 0
    @Shadow
    public abstract void updateOnTrack(int par1, int par2, int par3, double par4, double par6, int par8, int par9);
    
    @Shadow
    public abstract void func_94088_b(double par1);
    
    @Overwrite
    public void onUpdate() {
        EntityMinecart self = (EntityMinecart)(Object)this;
        
        
        IUpdatePlayerListBox field_82344_g_thing = ((IEntityMinecartAccessMixins)self).getField_82344_g();
        if (field_82344_g_thing != null) {
            field_82344_g_thing.update();
        }

        if (self.getRollingAmplitude() > 0) {
            self.setRollingAmplitude(self.getRollingAmplitude() - 1);
        }

        if (self.getDamage() > 0) {
            self.setDamage(self.getDamage() - 1);
        }

        if (self.posY < -64.0D) {
            this.kill();
        }

        int var2;

        if (
            !self.worldObj.isRemote &&
            self.worldObj instanceof WorldServer
        ) {
            self.worldObj.theProfiler.startSection("portal");
            MinecraftServer var1 = ((WorldServer)self.worldObj).getMinecraftServer();
            var2 = self.getMaxInPortalTime();

            if (this.inPortal) {
                if (var1.getAllowNether()) {
                    if (
                        self.ridingEntity == null &&
                        this.field_82153_h++ >= var2
                    ) {
                        this.field_82153_h = var2;
                        self.timeUntilPortal = self.getPortalCooldown();
                        byte var3;

                        if (self.worldObj.provider.dimensionId == -1) {
                            var3 = 0;
                        }
                        else {
                            var3 = -1;
                        }

                        self.travelToDimension(var3);
                    }

                    this.inPortal = false;
                }
            }
            else {
                if (this.field_82153_h > 0) {
                    this.field_82153_h -= 4;
                }

                if (this.field_82153_h < 0) {
                    this.field_82153_h = 0;
                }
            }

            if (self.timeUntilPortal > 0) {
                --self.timeUntilPortal;
            }

            self.worldObj.theProfiler.endSection();
        }
        
#define USE_SERVER_MOVEMENT 0

#define IGNORE_TURN_PROGRESS 0

#define IGNORE_REVERSE_FIELD 0

#define IGNORE_YAW_WRAPPING 1

    //public static double lerp(double d, double d2, double d3) {
        //return d2 + d * (d3 - d2);
    //}

#if !USE_SERVER_MOVEMENT
        if (self.worldObj.isRemote) {
#if !IGNORE_TURN_PROGRESS
            int turn_progress = ((IEntityMinecartAccessMixins)self).getTurnProgress();
            if (turn_progress > 0) {
                double dTurn = 1.0D / (double)turn_progress;
                double dX = self.posX + (((IEntityMinecartAccessMixins)self).getMinecartX() - self.posX) * dTurn;
                double dY = self.posY + (((IEntityMinecartAccessMixins)self).getMinecartY() - self.posY) * dTurn;
                double dZ = self.posZ + (((IEntityMinecartAccessMixins)self).getMinecartZ() - self.posZ) * dTurn;
                double dYaw = MathHelper.wrapAngleTo180_double(((IEntityMinecartAccessMixins)self).getMinecartYaw() - (double)self.rotationYaw);
                self.rotationYaw = (float)((double)self.rotationYaw + dYaw * dTurn);
                self.rotationPitch = (float)((double)self.rotationPitch + (((IEntityMinecartAccessMixins)self).getMinecartPitch() - (double)self.rotationPitch) * dTurn);
                ((IEntityMinecartAccessMixins)self).setTurnProgress(turn_progress - 1);
                self.setPosition(dX, dY, dZ);
                this.setRotation(self.rotationYaw, self.rotationPitch);
            }
            else {
                self.setPosition(self.posX, self.posY, self.posZ);
                this.setRotation(self.rotationYaw, self.rotationPitch);
            }
#else
            self.setPosition(
                ((IEntityMinecartAccessMixins)self).getMinecartX(),
                ((IEntityMinecartAccessMixins)self).getMinecartY(),
                ((IEntityMinecartAccessMixins)self).getMinecartZ()
            );
            this.setRotation(
                (float)((IEntityMinecartAccessMixins)self).getMinecartYaw(),
                (float)((IEntityMinecartAccessMixins)self).getMinecartPitch()
            );
#endif
        }
        else {
#endif
            self.prevPosX = self.posX;
            self.prevPosY = self.posY;
            self.prevPosZ = self.posZ;
            self.motionY -= 0.03999999910593033D;
            int x = MathHelper.floor_double(self.posX);
            var2 = MathHelper.floor_double(self.posY);
            int z = MathHelper.floor_double(self.posZ);

            if (BlockRailBase.isRailBlockAt(self.worldObj, x, var2 - 1, z)) {
                --var2;
            }

            double var4 = 0.4D;
            int blockId = self.worldObj.getBlockId(x, var2, z);

            if (BlockRailBase.isRailBlock(blockId)) {
                int meta = self.worldObj.getBlockMetadata(x, var2, z);
                this.updateOnTrack(x, var2, z, var4, 0.0078125D, blockId, meta);

                if (blockId == Block.railActivator.blockID) {
                    self.onActivatorRailPass(x, var2, z, (meta & 8) != 0);
                }
            }
            else {
                this.func_94088_b(var4);
            }

            this.doBlockCollisions();
            self.rotationPitch = 0.0F;
            double xDelta = self.prevPosX - self.posX;
            double zDelta = self.prevPosZ - self.posZ;

            if (xDelta * xDelta + zDelta * zDelta > 0.001D) {
                self.rotationYaw = (float)(Math.atan2(zDelta, xDelta) * 180.0D / Math.PI);
#if !IGNORE_REVERSE_FIELD
                if (((IEntityMinecartAccessMixins)self).getIsInReverse()) {
                    self.rotationYaw += 180.0F;
                }
#endif
            }

#if !IGNORE_YAW_WRAPPING
            double yawDelta = (double)MathHelper.wrapAngleTo180_float(self.rotationYaw - self.prevRotationYaw);

            if (yawDelta < -170.0D || yawDelta >= 170.0D) {
                self.rotationYaw += 180.0F;
#if !IGNORE_REVERSE_FIELD
                ((IEntityMinecartAccessMixins)self).setIsInReverse(
                    !((IEntityMinecartAccessMixins)self).getIsInReverse()
                );
#endif
            }
#endif

            this.setRotation(self.rotationYaw, self.rotationPitch);
#if USE_SERVER_MOVEMENT
            if (!self.worldObj.isRemote) {
#endif
                List<Entity> entityList = self.worldObj.getEntitiesWithinAABBExcludingEntity(self, self.boundingBox.expand(0.20000000298023224D, 0.0D, 0.20000000298023224D));

                if (
                    entityList != null &&
                    !entityList.isEmpty()
                ) {
                    for (Entity entity : entityList) {
                        if (
                            entity != self.riddenByEntity &&
                            entity.canBePushed() &&
                            entity instanceof EntityMinecart
                        ) {
                            entity.applyEntityCollision(self);
                        }
                    }
                }

                if (
                    self.riddenByEntity != null &&
                    self.riddenByEntity.isDead
                ) {
                    if (self.riddenByEntity.ridingEntity == self) {
                        self.riddenByEntity.ridingEntity = null;
                    }

                    self.riddenByEntity = null;
                }
#if USE_SERVER_MOVEMENT
            }
#endif
#if !USE_SERVER_MOVEMENT
        }
#endif
    }
#endif
}