package zero.test.mixin.deco;

import net.minecraft.src.*;

import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;

import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Redirect;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
import org.spongepowered.asm.mixin.Overwrite;
import org.spongepowered.asm.mixin.Final;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.gen.Invoker;
import org.spongepowered.asm.mixin.gen.Accessor;

import deco.block.blocks.ColoredBlock;
import deco.block.blocks.StainedGlassBlock;

import zero.test.ZeroUtil;

#include "..\..\util.h"
#include "..\..\feature_flags.h"

@Mixin(StainedGlassBlock.class)
public abstract class StainedGlassBlockMixins /*extends ColoredBlock*/ {
    /*
    public StainedGlassBlockMixins() {
        super(0, null, null);
    }
    */
    
    @Environment(EnvType.CLIENT)
    //@Override
    //public boolean shouldSideBeRendered(IBlockAccess blockAccess, int neighborX, int neighborY, int neighborZ, int neighborSide) {
    public boolean method_447(IBlockAccess blockAccess, int neighborX, int neighborY, int neighborZ, int neighborSide) {
        if (blockAccess.getBlockId(neighborX, neighborY, neighborZ) != ZeroUtil.getBlockId(this)) {
            //return super.shouldSideBeRendered(blockAccess, neighborX, neighborY, neighborZ, neighborSide);
            Block neighborBlock = Block.blocksList[blockAccess.getBlockId(neighborX, neighborY, neighborZ)];

            if (neighborBlock != null) {
                return neighborBlock.shouldRenderNeighborFullFaceSide(blockAccess, neighborX, neighborY, neighborZ, neighborSide);
            }

            return true;
        }
        return false;
    }
    
    @Environment(EnvType.CLIENT)
    //@Override
    public boolean shouldRenderNeighborFullFaceSide(IBlockAccess blockAccess, int neighborX, int neighborY, int neighborZ, int neighborSide) {
        return true;
    }
    
    // Treat as transparent for AO
    @Environment(EnvType.CLIENT)
    //@Override
    //public float getAmbientOcclusionLightValue(IBlockAccess blockAccess, int x, int y, int z) {
    public float method_465(IBlockAccess blockAccess, int x, int y, int z) {
        return 1.0F;
    }
}